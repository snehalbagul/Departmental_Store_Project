        -:    0:Source:create_queue_func.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:/****************************************************************************************************************************************
        -:    2: **FUNCTION NAME   :    create_queue_func
        -:    3: **
        -:    4: **DESCRIPTION     :    This function is used to create a queue to start the sale.
        -:    5: **
        -:    6: **
        -:    7: **RETURNS         :  
        -:    8: **
        -:    9: **
        -:   10: ***************************************************************************************************************************************/
        -:   11:
        -:   12:#include <stdio.h>
        -:   13:#include <stdlib.h>
        -:   14:#include <ctype.h>
        -:   15:#include<string.h>
        -:   16:#include "header.h"
        -:   17:
        -:   18:
        -:   19://*****************CALLING QUEUES*******************************
        -:   20:
        -:   21://******************* Creating queue for sales**********************
function create_queues_for_sale called 2 returned 100% blocks executed 80%
        2:   22:int create_queues_for_sale(){
        2:   23:	int age=0;
        2:   24:	int res=0;
        -:   25:	while(1)
        -:   26:	{
        2:   27:		printf("enter age:");
call    0 returned 2
        2:   28:		scanf("%d",&age);
call    0 returned 2
        -:   29:		// Validating age
        2:   30:		if(age<18 || age>35)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        -:   31:		{
    #####:   32:			printf("age should be min 15 max 35\n");
call    0 never executed
    #####:   33:			continue;
        -:   34:		}
        -:   35:		else
        -:   36:		{
        -:   37:			break;
        -:   38:		}
        -:   39:	}
        -:   40:	//*********************Calling Queue****************************
        2:   41:	create_queue1();  
call    0 returned 2
        2:   42:	return(EXIT_SUCCESS);
        -:   43:
        -:   44:}
        -:   45:
        -:   46:
        -:   47://***************CREATES QUEUE1 OF CUSTOMER HAVING AGE BETWEEN15to35..........
        -:   48:
        -:   49:
function create_queue1 called 2 returned 100% blocks executed 68%
        2:   50:int create_queue1(){
        -:   51:
        -:   52:	static int counter1=0; 
        -:   53:	q  *new;   // creating pointer of q struct type 
        2:   54:	if(counter1>4){
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:   55:		// Queue is full
    #####:   56:		printf("\nQUEUE IS FULL!!!");
call    0 never executed
    #####:   57:		return 0;
        -:   58:	}  
        2:   59:	new = (q *) calloc(1,sizeof(q));  
        -:   60:
        -:   61:	//*******VALIDATING CUSTOMER NAME..... 
        -:   62:
        -:   63:	while(1)
    #####:   64:	{
        2:   65:		printf("\nEnter Customer Name:");
call    0 returned 2
        2:   66:		scanf("%s",new->customer_name);
call    0 returned 2
        2:   67:		int length=strlen(new->customer_name);
        2:   68:		if(length<5 || length>30){
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        -:   69:			// Invalid customer name
    #####:   70:			printf("\nINVALID CUSTOMER NAME!!!");
call    0 never executed
    #####:   71:			continue;
        -:   72:		}
        2:   73:		int flag=0;
       13:   74:		for(int i=0;i<strlen(new->customer_name);i++){
branch  0 taken 11
branch  1 taken 2 (fallthrough)
       11:   75:			if(!isalpha(new->customer_name[i]))
branch  0 taken 0 (fallthrough)
branch  1 taken 11
        -:   76:			{
    #####:   77:				flag=1;
    #####:   78:				break;
        -:   79:			}
        -:   80:		}
        2:   81:		if(flag==1){
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:   82:			// Customer name contain character other than alphabets
    #####:   83:			printf("\nCUSTOMER NAME SHOULD CONTAIN ONLY ALPHABETS!!!");
call    0 never executed
    #####:   84:			continue;
        -:   85:		}
        -:   86:		else{
        2:   87:			break;
        -:   88:		}
        -:   89:	}
        -:   90:
        -:   91:	//*******VALIDATING PRODUCT CODE.....
        -:   92:
        -:   93:	while(1)
        -:   94:	{
        2:   95:		printf("\nEnter the Product code(max 3 digit)-");
call    0 returned 2
        2:   96:		scanf("%d",&new->product_code);
call    0 returned 2
        2:   97:		if(new->product_code<1 || new->product_code>999)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        -:   98:		{ 
        -:   99:			//Product_code in invalid contains either less than 1 or more than 999
    #####:  100:			printf("\nINVALID!!!\n");
call    0 never executed
    #####:  101:			continue;
        -:  102:		}
        -:  103:		else
        -:  104:			break;
        -:  105:
        -:  106:
        -:  107:	}
        -:  108:
        -:  109:
        -:  110:	//*******VALIDATING UNITS OF PRODUCT.....
        -:  111:
        -:  112:	while(1)
        -:  113:	{
       2*:  114:		printf("\nEnter units want to buy-");
call    0 returned 2
        2:  115:		scanf("%d",&new->units);
call    0 returned 2
        2:  116:		if(new->units<1 || new->units>50){
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        -:  117:			// Products units is invalid ,contains either less than 1 or more than 50
    #####:  118:			printf("INVALID UNITS!!!");
call    0 never executed
        -:  119:		}
        -:  120:		else{
        -:  121:			break;
        -:  122:		}
        -:  123:	}
        -:  124:
        -:  125:	//*******ENTERING DATA TO THE QUEUE....
        2:  126:	if(!front1)  
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  127:	{  
        1:  128:		front1= new;  
        1:  129:		rear1 = new;   
        1:  130:		front1->next = NULL;  
        -:  131:	}  
        -:  132:	else   
        -:  133:	{  
        1:  134:		rear1->next = new;  
        1:  135:		rear1 = new;  
        1:  136:		rear1->next = NULL;
        -:  137:
        -:  138:	}
        -:  139:
        2:  140:	counter1++;
        2:  141:}
        -:  142:
        -:  143:
        -:  144:
        -:  145://**********************************DISPLAYING QUEUE-1****************************************
        -:  146:
function display1 called 1 returned 100% blocks executed 90%
        1:  147:int display1(){
        -:  148:
        -:  149:	//Creating pointer of q struct type
        -:  150:	q *new;  
        1:  151:	new = front1;      
        1:  152:	if(!front1)  
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  153:	{  
        -:  154:		// Queue is empty
    #####:  155:		printf("\nEmpty queue\n");  
call    0 never executed
        -:  156:	}  
        1:  157:       	printf("\nCUSTOMER NAME             UNITS               PRODUCT CODE");
call    0 returned 1
        3:  158:	while(new)   
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  159:	{  
        -:  160:		// Displaying queue  contents
        2:  161:		printf("\n%3s                 %5d                  %5d \n",new ->customer_name,new->units,new->product_code);  
call    0 returned 2
        2:  162:		new = new -> next;  
        -:  163:	}  
        1:  164:	system("read a");
call    0 returned 1
        1:  165:        system("clear");	
call    0 returned 1
        1:  166:}
        -:  167:
        -:  168://*************************************************************************************
