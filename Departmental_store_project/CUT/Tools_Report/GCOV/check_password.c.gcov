        -:    0:Source:check_password.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:/****************************************************************************************************************************************
        -:    2:
        -:    3: **FUNCTION NAME    :   check_password
        -:    4: **
        -:    5: **DESCRIPTION      :   This function is used to validate the Employee Password entered by the
        -:    6:                        employee to go inside the product file maintenance. 
        -:    7: **
        -:    8: **
        -:    9: **RETURNS          :   It returns 0 if password is correct and 1 if password is wrong.
        -:   10: **
        -:   11: **
        -:   12: *****************************************************************************************************************************************/
        -:   13:#include<stdio.h>
        -:   14:#include<stdlib.h>
        -:   15:#include<stddef.h>
        -:   16:#include<string.h>
        -:   17:#include<ctype.h>
        -:   18:#include<termios.h>
        -:   19:#include "header.h"
        -:   20:#define MAXPW 32
        -:   21://ssize_t getpasswd(char **,size_t,int,FILE *);
        -:   22:
        -:   23:
        -:   24:
function getpasswd called 2 returned 100% blocks executed 55%
        2:   25:ssize_t getpasswd(char **pw,size_t sz,int mask,FILE *fp)
        -:   26:{
        2:   27:	if(!pw || !sz || !fp)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    #####:   28:		return -1;
        -:   29:#ifdef MAXPW
        2:   30:	if(sz>MAXPW)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   31:		sz=MAXPW;
        -:   32:#endif
        2:   33:	if(*pw==NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:   34:	{
        -:   35:		//To reallocate memory......
    #####:   36:		void *temp=realloc(*pw,sz * sizeof **pw); 
    #####:   37:		if(!temp)
branch  0 never executed
branch  1 never executed
    #####:   38:			return -1;
    #####:   39:		memset (temp,0,sz);
    #####:   40:		*pw=(char*) temp;
        -:   41:	}
        2:   42:	size_t idx=0;
        2:   43:	int c=0;
        -:   44:	struct termios old_kbd_mode;
        -:   45:	struct termios new_kbd_mode;
        -:   46:
        2:   47:	if(tcgetattr (0,&old_kbd_mode))
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:   48:	{
    #####:   49:		fprintf(stderr,"%s() error:together failed.\n",__func__);
call    0 never executed
    #####:   50:		return -1;
        -:   51:	}
        2:   52:	memcpy (&new_kbd_mode,&old_kbd_mode,sizeof(struct termios));
        -:   53:
        2:   54:	new_kbd_mode.c_lflag &=~(ICANON | ECHO);
        2:   55:	new_kbd_mode.c_cc[VTIME]=0;
        2:   56:	new_kbd_mode.c_cc[VMIN]=1;
        2:   57:	if(tcsetattr (0,TCSANOW,&new_kbd_mode))
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:   58:	{
    #####:   59:		fprintf(stderr,"%s() error:tcsetattr failed.\n",__func__);
call    0 never executed
    #####:   60:		return -1;
        -:   61:	}
       9*:   62:	while(((c=fgetc(fp))!='\n' && c!=EOF && idx <sz-1) || (idx==sz-1 && c==127))
call    0 returned 9
branch  1 taken 7 (fallthrough)
branch  2 taken 2
branch  3 taken 7 (fallthrough)
branch  4 taken 0
branch  5 taken 7
branch  6 taken 0 (fallthrough)
branch  7 taken 0 (fallthrough)
branch  8 taken 2
branch  9 never executed
branch 10 never executed
        -:   63:	{
        7:   64:		if(c!=127)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        -:   65:		{
        7:   66:			if(31 <mask && mask<127)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
branch  2 taken 7 (fallthrough)
branch  3 taken 0
        7:   67:				fputc(mask,stdout);
call    0 returned 7
        7:   68:			(*pw)[idx++]=c;
        -:   69:		}
    #####:   70:		else if(idx>0)
branch  0 never executed
branch  1 never executed
        -:   71:		{
    #####:   72:			if(31<mask && mask<127)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   73:			{
    #####:   74:				fputc(0x8,stdout);
call    0 never executed
    #####:   75:				fputc(' ',stdout);
call    0 never executed
    #####:   76:				fputc(0x8,stdout);
call    0 never executed
        -:   77:			}
    #####:   78:			(*pw)[--idx]=0;
        -:   79:		}
        -:   80:	}
        2:   81:	(*pw)[idx]=0;
        2:   82:	if(tcsetattr(0,TCSANOW,&old_kbd_mode))
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:   83:	{
    #####:   84:		fprintf(stderr,"%s() error:tcsetattr failed.\n",__func__);
call    0 never executed
    #####:   85:		return -1;
        -:   86:	}
       2*:   87:	if(idx==sz-1 && c!='\n')
branch  0 taken 0 (fallthrough)
branch  1 taken 2
branch  2 never executed
branch  3 never executed
    #####:   88:		fprintf(stderr,"(%s() warning:truncated at %zu chars.)\n",__func__,sz-1);
call    0 never executed
        2:   89:	return idx;
        -:   90:}
        -:   91:
        -:   92:
        -:   93:/*****************TO CHECK PASSWORD*********************************************/
        -:   94:
function check_Password called 1 returned 100% blocks executed 78%
        1:   95:int check_Password()
        -:   96:{
        1:   97:	char pw[MAXPW]={0};
        1:   98:	char *p=pw;
        1:   99:	FILE *fp=stdin;
        1:  100:	ssize_t nchr=0;
        1:  101:	nchr=getpasswd(&p,MAXPW,'*',fp);
call    0 returned 1
        1:  102:	printf("\n Enter employee pasword:");
call    0 returned 1
        1:  103:	nchr=getpasswd(&p,MAXPW,'*',fp);
call    0 returned 1
       1*:  104:	if(strcmp(p,"abc@123")==0 || strcmp(p,"xyz@345")==0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        -:  105:	{
        1:  106:		return 0;
        -:  107:	}
        -:  108:	else
        -:  109:	{
    #####:  110:		return 1;
        -:  111:	}
        -:  112:
        -:  113:}
        -:  114:
        -:  115:/*********************************************************************************/
